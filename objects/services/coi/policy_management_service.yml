name: policy_management

docstring: |
  Provides the interface to define and manage policy and a repository to store and retrieve policy
  and templates for policy definitions, aka attribute authority.

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+COI+OV+Policy+Management+Service

dependencies: [resource_registry]

methods:
  create_policy:
    docstring: |
      Persists the provided Policy object for the specified Org id. The id string returned
      is the internal id by which Policy will be identified in the data store.
    in:
      policy: !Policy
    out:
      policy_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_policy:
    docstring: |
      Updates the provided Policy object.  Throws NotFound exception if
      an existing version of Policy is not found.  Throws Conflict if
      the provided Policy object is not based on the latest persisted
      version of the object.
    in:
      policy: !Policy
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_policy:
    docstring: |
      Returns the Policy object for the specified policy id.
      Throws exception if id does not match any persisted Policy
      objects.
    in:
      policy_id: ""
    out:
      policy: !Policy
    throws:
      NotFound: object with specified id does not exist

  delete_policy:
    docstring: |
      For now, permanently deletes Policy object with the specified
      id. Throws exception if id does not match any persisted Policy.
    in:
      policy_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  enable_policy:
    docstring: |
      Sets a flag to enable the use of the policy rule
    in:
      policy_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  disable_policy:
    docstring: |
      Resets a flag to disable the use of the policy rule
    in:
      policy_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  add_resource_policy:
    docstring: |
      Associates a policy rule to a specific resource
    in:
      resource_id: ""
      policy_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist


  remove_resource_policy:
    docstring: |
      Removes an association for a policy rule to a specific resource
    in:
      resource_id: ""
      policy_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  find_resource_policies:
    docstring: |
      Finds all policies associated with a specific resource
    in:
      resource_id: ""
    out:
      policy_list: []
    throws:
      NotFound: object with specified id does not exist


  get_active_resource_policy_rules:
    docstring: |
      Generates the set of all enabled policies for the specified resource
    in:
      resource_id: ""
    out:
      policy: ""
    throws:
      NotFound: object with specified id does not exist


  add_service_policy:
    docstring: |
      Associates a policy rule to a specific service
    in:
      service_name: ""
      policy_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  remove_service_policy:
    docstring: |
      Removes an association for a policy rule to a specific service
    in:
      service_name: ""
      policy_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  find_service_policies:
    docstring: |
      Finds all policies associated with a specific service
    in:
      service_name: ""
    out:
      policy_list: []
    throws:
      NotFound: object with specified id does not exist


  get_active_service_policy_rules:
    docstring: |
      Generates the set of all enabled policies for the specified service
    in:
      org_id: ""
      service_name: ""
    out:
      policy: ""
    throws:
      NotFound: object with specified id does not exist

  # -----------------

  create_role:
    docstring: |
      Persists the provided UserRole object. The name of a role can only contain
      alphanumeric and underscore characters while the description can me human
      readable. The id string returned is the internal id by which a UserRole will
      be indentified in the data store.
    in:
      user_role: !UserRole
    out:
      user_role_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_role:
    docstring: |
      Updates the provided UserRole object.  The name of a role can only contain
      alphanumeric and underscore characters while the description can me human
      readable.Throws NotFound exception if an existing version of UserRole is
      not found.  Throws Conflict if the provided UserRole object is not based on
      the latest persisted version of the object.
    in:
      user_role: !UserRole
    out:
      success: True
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_role:
    docstring: |
      Returns the UserRole object for the specified role id.
      Throws exception if id does not match any persisted UserRole
      objects.
    in:
      user_role_id: ""
    out:
      user_role: !UserRole
    throws:
      NotFound: object with specified id does not exist

  delete_role:
    docstring: |
      For now, permanently deletes UserRole object with the specified
      id. Throws exception if id does not match any persisted UserRole.
    in:
      user_role_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  find_roles:
    docstring: |
      Returns a list of UserRole objects defined in the resource registry.
    in:
    out:
      user_role_list: []
    throws:

  find_role:
    docstring: |
      Returns UserRole object that matches the specified name.
    in:
      name: ""
    out:
      user_role: !UserRole
    throws:
      NotFound: object with specified id does not exist
