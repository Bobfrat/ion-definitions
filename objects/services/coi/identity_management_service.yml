# Identity Management Service interface definition

# TODO:
# - Move R1 operations into R2 framework
# - Check find_userinfo_by_subject, cilogon*

name: identity_management
dependencies: [resource_registry]
methods:
  # -----------------
  # Working with internal user identities

  create_user_identity:
    docstring: |
      Persists the provided UserIdentity object. The id string returned
      is the internal id by which users should be represented in message
      headers for policy enforcement, etc. 
    in:
      user_identity: !UserIdentity
    out:
      user_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_user_identity:
    docstring: |
      Updates the provided UserIdentity object.  Throws NotFound exception if
      an existing version of UserIdentity is not found.  Throws Conflict if
      the provided UserIdentity object is not based on the latest persisted
      version of the object.
    in:
      user_identity: !UserIdentity
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_user_identity:
    docstring: |
      Returns the UserIdentity object for the specified user id.
      Throws exception if id does not match any persisted UserIdentity
      objects.
    in:
      user_id: ""
    out:
      user_identity: !UserIdentity
    throws:
      NotFound: object with specified id does not exist

  delete_user_identity:
    docstring: |
      For now, permanently deletes UserIdentity object with the specified
      id. Throws exception if id does not match any persisted UserIdentity.
    in:
      user_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  # -----------------
  # Working with external identities

  register_user_credentials:
    docstring: |
      Persists new UserCredentials object. Then establishes an association
      with the UserIdentity object identified by the passed user id.
    in:
      user_id: ""
      credentials: !UserCredentials
    out:
    throws:
      BadRequest: if object passed has _id or _rev attribute or association creation fails
      NotFound: UserIdentity object does not exist

  unregister_user_credentials:
    docstring: |
      For now, permanently deletes the UserCredential object with the
      specified name.  The association between the UserCredential object
      and the UserIdentity object indicated by the passed user id is
      also deleted.
    in:
      user_id: ""
      credentials_name: ""
    out:
    throws:
      NotFound: if UserCredential or association do not exist

  # -----------------
  # Working with user information (profile)

  create_user_info:
    docstring: |
      Persists new UserInfo object. Then establishes an association with
      the UserIdentity object identified by the passed user id.
    in:
      user_id: ""
      user_info: !UserInfo
    out:
      user_info_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute or association creation fails
      NotFound: UserIdentity object does not exist

  update_user_info:
    docstring: |
      Updates the provided UserInfo object.  Throws NotFound exception if
      an existing version of UserInfo is not found.  Throws Conflict if
      the provided UserInfo object is not based on the latest persisted
      version of the object.
    in:
      user_info: !UserInfo
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_user_info:
    docstring: |
      Returns the UserInfo object for the specified user id.
      Throws exception if id does not match any persisted UserInfo
      objects.
    in:
      user_info_id: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: object with specified id does not exist

  delete_user_info:
    docstring: |
      For now, permanently deletes the UserInfo object with the
      specified id.  The association between the UserInfo object
      and the UserIdentity object is also deleted.
    in:
      user_info_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist or association could not be found

  find_user_info_by_id:
    docstring: |
      Return the UserInfo object associated with the UserIdentity object
      identified by the passed user id.
    in:
      user_id: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: failed to find UserIdentity, association or UserInfo object

  find_user_info_by_name:
    docstring: |
      Return the UserInfo object whose name attribute matches the passed value.
    in:
      name: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: failed to find UserInfo
      Inconsistent: Multiple UserInfo objects matched name

  find_user_info_by_subject:
    docstring: |
      Return the UserInfo object associated with the UserIdentity object
      which is associated with the UserCredential with subject matching
      the passed value.
    in:
      subject: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: failed to find UserCredential, UserIdentity, association or UserInfo object

  # -----------------
  # Working with internal resource identities

  create_resource_identity:
    in:
      resource_identity: !ResourceIdentity
    out:
      resource_identity_id: ""

  update_resource_identity:
    in:
      resource_identity: !ResourceIdentity
    out:

  read_resource_identity:
    in:
      resource_identity_id: ""
    out:
      resource_identity: !ResourceIdentity

  delete_resource_identity:
    in:
      resource_identity_id: ""
    out:

