# PubSub Management Service interface definition
# Core Activities of PubSub: stream management, subscription management
# MAYBE LATER: historic replay management, only for curated stream

# Notes:
# Steams exist in the context of a higher level resource (steam XP, topic tree?)

name: pubsub_management
dependencies: [resource_registry]
methods:

  create_stream:
    docstring: The stream resource id is the topic in the simple topic topology.
    in:
      stream: !Stream
    out:
      stream_id: ""

  update_stream:
    in:
      stream: !Stream
    out:
      success: True

  read_stream:
    in:
      stream_id: ""
    out:
      stream: !Stream

  delete_stream:
    in:
      stream_id: ""
    out:
      success: True

  find_streams:
    in:
      filter: !ResourceFilter
    out:
      stream_list: []

  find_streams_by_producer:
    in:
      producer_id: ""
    out:
      stream_list: []

  find_streams_by_consumer:
    in:
      consumer_id: ""
    out:
      stream_list: []

  # -----------------

  create_subscription:
    in:
      subscription: !Subscription
    out:
      subscription_id: ""

  update_subscription:
    in:
      subscription: !Subscription
    out:
      success: True

  read_subscription:
    in:
      subscription_id: ""
    out:
      subscription: !Subscription

  delete_subscription:
    in:
      subscription_id: ""
    out:
      success: True

  activate_subscription:
    in:
      subscription_id: ""
    out:
      success: True

  deactivate_subscription:
    in:
      subscription_id: ""
    out:
      success: True

  # -----------------

  register_consumer:
    in:
      exchange_name: ""
    out:
      success: True

  unregister_consumer:
    in:
      exchange_name: ""
    out:
      success: True

  find_consumers_by_stream:
    in:
      stream_id: ""
    out:
      consumer_list: []

  # -----------------

  # Note: a producer is not a resource, just a declaration

  register_producer:
    docstring:  The publication credential is nothing more than the stream resource id which is used as the routing key for messages on that stream in this prototype.
    in:
      exchange_name: ""
      stream_id: ""
    out:
      credentials: ""

  unregister_producer:
    in:
      exchange_name: ""
      stream_id: ""
    out:
      success: True

  find_producers_by_stream:
    in:
      stream_id: ""
    out:
      producer_list: []

