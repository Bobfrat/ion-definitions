name: user_notification

docstring: |
  Provides management of user requests for notification of various events within ION. Also provides access
  to the event capabilities of ION

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+COI+OV+User+Notification+Service

dependencies: [resource_registry, transform_management]

methods:
  create_notification:
    docstring: |
      Persists the provided NotificationRequest object for the specified Org id. Associate the
      Notification resource with the use. The id string returned
      is the internal id by which NotificationRequest will be identified in the data store.
    in:
      notification: !NotificationRequest
      user_id: ""
    out:
      notification_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute, or if more than one user info exists
      NotFound: if user does not exist, user info does not exist, or user email does not exist

  create_email:
    docstring: |
      Creates a NotificationRequest object for the specified User Id. Associate the Notification
      resource with the user. Setup subscription and call back to send email
      @todo - is the user email automatically selected from the user id?
    in:
      event_type: ""
      event_subtype: ""
      origin: ""
      origin_subtype: ""
      user_id: ""
      email: ""
    out:
      notification_id: ""
    throws:
      NotFound: if user does not exist, user info does not exist, or user email does not exist

  create_sms:
    docstring: |
      Creates a NotificationRequest object for the specified User Id. Associate the Notification
      resource with the user. Setup subscription and call back to send an sms to their phone
      @todo - is the user email automatically selected from the user id?
    in:
      event_type: ""
      event_subtype: ""
      origin: ""
      origin_subtype: ""
      user_id: ""
      phone: ""
      provider: ""
    out:
      notification_id: ""
    throws:
      NotFound: if user does not exist, user info does not exist, or user email does not exist

  create_detection_filter:
    docstring: |
      Creates a NotificationRequest object for the specified User Id. Associate the Notification
      resource with the user. Setup subscription and call back do a detection filter of some type...
      @todo - is the user email automatically selected from the user id?
    in:
      event_type: ""
      event_subtype: ""
      origin: ""
      origin_subtype: ""
      user_id: ""
      filter_config: {}
    out:
      notification_id: ""
    throws:
      NotFound: if user does not exist, user info does not exist, or user email does not exist


  update_notification:
    docstring: |
      Updates the provided NotificationRequest object.  Throws NotFound exception if
      an existing version of NotificationRequest is not found.  Throws Conflict if
      the provided NotificationRequest object is not based on the latest persisted
      version of the object.
    in:
      notification: !NotificationRequest
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute, or more than one user exists for the notification
      NotFound: if object with specified id does not exist, or no user found for notification
      Conflict: if object not based on latest persisted object version

  read_notification:
    docstring: |
      Returns the NotificationRequest object for the specified notification id.
      Throws exception if id does not match any persisted NotificationRequest
      objects.
    in:
      notification_id: ""
    out:
      notification: !NotificationRequest
    throws:
      NotFound: if object with specified id does not exist

  delete_notification:
    docstring: |
      For now, permanently deletes NotificationRequest object with the specified
      id. Throws exception if id does not match any persisted NotificationRequest.
    in:
      notification_id: ""
    out:
    throws:
      BadRequest: if more than one user exists for the notification
      NotFound: if object with specified id does not exist, user for notification does not exist, or association does not exist

  find_events:
    docstring: |
      Returns a list of events that match the specified search criteria. Will throw a not NotFound exception
      if no events exist for the given parameters.
      @todo can we replace this with discovery service?
    in:
      origin: ""
      type: ""
      min_datetime: ""
      max_datetime: ""
      limit: 0
      descending: False
    out:
      event_list: []
    throws:
      NotFound: if object with specified paramteres does not exist  