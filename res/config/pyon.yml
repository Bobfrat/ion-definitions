# Central configuration file for container, ION system and services.
# The contents are transformed into a dict that supports dot notation:
#   CFG.broker.amqp.host
# Do not modify this file! Set overrides in pyon.local.yml or in rel files

# The "system" root entry defines settings for the distributed ION system that this
# container starts or joins. A system comprises all containers with the same sysname.
system:
  # sysname - by default it is generated from your system's uname.
  # uncomment and set here if you want to lock it to something.
  #name: r2demo
  name:

  # Global flag to use a mock datastore instead of CouchDB
  mockdb: False
  # Global flag to clean all persistent stores and reset system to defaults on start
  force_clean: True

# The "server" root entry defines settings for connections to external servers
server:
  amqp:
    host: localhost
    port: 5672
    username: guest
    password: guest
    vhost: /
    heartbeat: 30
  couchdb:
    host: localhost
    port: 5984
    username:
    password:

# The "container" root entry defines settings for the current Pyon container
container:
  messaging:
    endpoint: # TBD: move entries to here
    interceptor: # TBD: move entries to here
  objects:
    validate: # TBD: move entries to here

# TBD: Rename to "container". See there.
cc:
  timeout:
    shutdown: 30.0
    heartbeat: 3.0
  proctype: green   # Type of ION process to spawn for new services/processes (green or python)

validate:
  setattr: True

endpoint:
  receive:
    timeout: 10   # Receive timeout in seconds

interceptor:
  interceptors:
    sample:
      class: pyon.core.interceptor.sample.SampleInterceptor
    sampleprocessonly:
      class: pyon.core.interceptor.sample.SampleProcessOnlyInterceptor
    codec:
      class: pyon.core.interceptor.codec.CodecInterceptor
    validate:
      class: pyon.core.interceptor.validate.ValidateInterceptor
      config:
        enabled: true
    encode:
      class: pyon.core.interceptor.encode.EncodeInterceptor
    governance:
      class: pyon.core.governance.governance_interceptor.GovernanceInterceptor
      config:
        enabled: false
        interceptor_order: [conversation, information, policy]
        governance_interceptors:
          conversation:
            class: pyon.core.governance.conversation.conversation_monitor_interceptor.ConversationMonitorInterceptor
          information:
            class: pyon.core.governance.information.information_model_interceptor.InformationModelInterceptor
          policy:
            class: pyon.core.governance.policy.policy_interceptor.PolicyInterceptor


  stack:
    message_outgoing: [codec, encode]
    message_incoming: [encode, codec]
    process_outgoing: [governance]
    process_incoming: [governance]


# The "service" root entry
service:

# TBD: Remove (use global flags instead)
directory:
  persistent: true
  force_clean: true

# TBD: Remove (use global flags instead)
resource_registry:
  persistent: true
  force_clean: true

# TBD: Remove (use global flags instead)
datastore:
  persistent: true
  force_clean: true

# TBD: Remove (use global flags instead)
external_data_agent_management:
  persistent: true

# TBD: Rename container.service_gateway
web_server:
  port: 5000
  hostname: localhost

# TBD: Rename system.exchange_spaces
exchange_spaces:
   # define the names and structure of exchange spaces and exchange points
    ioncore:
        exchange_points:
            science_data:
                type: topic_tree
            events:
                type: topic_tree

# TBD: Rename system.core_xps
core_xps:
    # used as defaults by pyon.ion.endpoint and PubSub Mgmt Service
    science_data: ioncore.science_data
    events: ioncore.events
