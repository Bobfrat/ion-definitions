# Central configuration file for Ion services and modules.
# The contents are transformed into a dict that supports dot notation:
# CFG.broker.amqp.host
# Do not modify this file! Set overrides in pyon.local.yml

server:
  amqp:
    host: localhost
    port: 5672
    username: guest
    password: guest
    vhost: /
    heartbeat: 30
  couchdb:
    host: localhost
    port: 5984
    username:
    password:

system:
  # sysname - by default it is generated from your system's uname.
  # uncomment and set here if you want to lock it to something.
  #name: r2demo
  name:

cc:
  timeout:
    shutdown: 30.0
    heartbeat: 3.0
  proctype: green   # Type of ION process to spawn for new services/processes (green or python)

endpoint:
  receive:
    timeout: 10   # Receive timeout in seconds

interceptor:
  interceptors:
    sample:
      class: pyon.core.interceptor.sample.SampleInterceptor
    sampleprocessonly:
      class: pyon.core.interceptor.sample.SampleProcessOnlyInterceptor
    codec:
      class: pyon.core.interceptor.codec.CodecInterceptor
    validate:
      class: pyon.core.interceptor.validate.ValidateInterceptor
      config:
        enabled: true
    encode:
      class: pyon.core.interceptor.encode.EncodeInterceptor
    governance:
      class: pyon.core.governance.governance_interceptor.GovernanceInterceptor
      config:
        enabled: false
        interceptor_order: [conversation, information, policy]
        governance_interceptors:
          conversation:
            class: pyon.core.governance.conversation.conversation_monitor_interceptor.ConversationMonitorInterceptor
          information:
            class: pyon.core.governance.information.information_model_interceptor.InformationModelInterceptor
          policy:
            class: pyon.core.governance.policy.policy_interceptor.PolicyInterceptor


  stack:
    message_outgoing: [codec, encode]
    message_incoming: [encode, codec]
    process_outgoing: [governance]
    process_incoming: [governance]

exchange_spaces:
   # define the names and structure of exchange spaces and exchange points
    ioncore:
        exchange_points:
            science_data:
                type: topic_tree
            events:
                type: topic_tree

core_xps:
    # used as defaults by pyon.ion.endpoint and PubSub Mgmt Service
    science_data: ioncore.science_data
    events: ioncore.events
